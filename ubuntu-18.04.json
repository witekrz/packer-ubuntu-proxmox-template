{
	"builders": [
		{
			"type": "proxmox",
			"proxmox_url": "https://{{user `proxmox_host`}}/api2/json",
			"insecure_skip_tls_verify": true,
			"username": "{{user `proxmox_api_user`}}",
			"password": "{{user `proxmox_api_password`}}",

			"vm_name": "{{user `template_name`}}",
			"vm_id": "{{ user `vmid` }}",
			"node": "{{user `proxmox_node_name`}}",
			"cores": "{{ user `cores` }}",
			"sockets": "{{ user `sockets` }}",
			"memory": "{{ user `memory` }}",
			"os": "l26",
			"network_adapters": [
				{
					"model": "virtio",
					"bridge": "vmbr0"
				}
			],
			"disks": [
				{
					"type": "scsi",
					"disk_size": "{{ user `disk_size`}}",
					"storage_pool": "{{user `datastore`}}",
					"storage_pool_type": "{{user `datastore_type`}}",
					"format": "raw",
					"cache_mode": "writeback"
				}
			],

			"ssh_timeout": "90m",
			"ssh_password": "{{ user `ssh_password` }}",
			"ssh_username": "{{ user `ssh_username` }}",

			"qemu_agent": true,
			"unmount_iso": true,

			"iso_file": "{{user `iso`}}",
			"http_directory": "./http",
			"template_description": "{{ user `template_description` }}",

			"boot_wait": "10s",
			"boot_command": [
				"{{ user `boot_command_prefix` }}",
				"/install/vmlinuz ",
				"auto ",
				"console-setup/ask_detect=false ",
				"debconf/frontend=noninteractive ",
				"debian-installer={{ user `locale` }} ",
				"hostname={{ user `hostname` }} ",
				"fb=false ",
				"grub-installer/bootdev=/dev/sda<wait> ",
				"initrd=/install/initrd.gz ",
				"kbd-chooser/method=us ",
				"keyboard-configuration/modelcode=SKIP ",
				"locale={{ user `locale` }} ",
				"noapic ",
				"passwd/username={{ user `ssh_username` }} ",
				"passwd/user-fullname={{ user `ssh_fullname` }} ",
				"passwd/user-password={{ user `ssh_password` }} ",
				"passwd/user-password-again={{ user `ssh_password` }} ",
				"preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/{{ user `preseed_file` }} ",
				"-- <enter>"
			]
		}
	],
	"provisioners": [
		{
			"pause_before": "20s",
			"type": "shell",
			"environment_vars": ["DEBIAN_FRONTEND=noninteractive"],
			"inline": [
				"date > provision.txt",
				"sudo apt-get update",
				"sudo apt-get -y upgrade",
				"sudo apt-get -y dist-upgrade",
				"sudo apt-get -y install linux-generic linux-headers-generic linux-image-generic",
				"sudo apt-get -y install qemu-guest-agent cloud-init",
				"sudo apt-get -y install procps iputils-ping telnet netcat mc wget curl dnsutils iproute2 vim tcpdump",
				"exit 0"
	
			]
		},
                {
                        "pause_before": "20s",
                        "type": "shell",
                        "environment_vars": ["DEBIAN_FRONTEND=noninteractive"],
			"max_retries": 3,
                        "inline": [
				"sudo apt-get remove docker docker-engine docker.io containerd runc",
				"sudo apt-get update && sudo apt-get install -y  apt-transport-https ca-certificates curl software-properties-common gnupg2",
				"curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key --keyring /etc/apt/trusted.gpg.d/docker.gpg add -",
				"sudo add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable'",
				"sudo apt-get update && sudo apt-get install -y --allow-downgrades containerd.io=1.2.13-2 docker-ce=5:19.03.11~3-0~ubuntu-bionic docker-ce-cli=5:19.03.11~3-0~ubuntu-bionic",
				"cat <<'EOF' | sudo tee /etc/docker/daemon.json",
					"{",
					  " \"exec-opts\": [\"native.cgroupdriver=systemd\"],",
					  " \"log-driver\": \"json-file\",",
					  " \"log-opts\": {",
					    "  \"max-size\": \"100m\"",
					  " },",
					  " \"storage-driver\": \"overlay2\"",
					"}",
					"EOF",
				"sudo mkdir -p /etc/systemd/system/docker.service.d",
				"sudo systemctl daemon-reload",
                                "sudo systemctl restart docker",
				"sudo systemctl enable docker",
				"exit 0"
	
			]
		},
                {
                        "pause_before": "20s",
                        "type": "shell",
                        "environment_vars": ["DEBIAN_FRONTEND=noninteractive"],
                        "inline": [
                                "cat <<'EOF' | sudo tee /etc/sysctl.d/k8s.conf",
                                        "net.bridge.bridge-nf-call-ip6tables = 1",
                                        "net.bridge.bridge-nf-call-iptables = 1",
                                        "EOF",
                                "sudo sysctl --system",
                                "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -",
                                "cat <<'EOF' | sudo tee /etc/apt/sources.list.d/kubernetes.list",
                                        "deb https://apt.kubernetes.io/ kubernetes-xenial main",
                                        "EOF",
                                "sudo apt-get update",
                                "sudo apt-get install -y kubelet kubeadm kubectl",
                                "sudo apt-mark hold kubelet kubeadm kubectl",
				"exit 0"
                        ]
                },
                {
                        "pause_before": "20s",
                        "type": "shell",
                        "environment_vars": ["DEBIAN_FRONTEND=noninteractive"],
                        "inline": [
                                "sudo systemctl daemon-reload",
                                "sudo systemctl restart kubelet",
				"sudo swapoff -a",
				"sudo sed -i '/ swap / s/^/#/' /etc/fstab",
				"exit 0"
                        ]
                },
                {
                        "pause_before": "20s",
                        "type": "shell",
                        "environment_vars": ["DEBIAN_FRONTEND=noninteractive"],
                        "inline": [
                                "sudo apt-get -y install avahi-daemon avahi-discover avahi-utils libnss-mdns mdns-scan",
				"exit 0"
                        ]
                }

	],
	"error-cleanup-provisioner": {
		"type": "shell-local",
		"inline": ["journalctl -xe | cat > crash_log.txt"]
	},
	"post-processors": [
		{
			"type": "shell-local",
			"inline": [
				"qm set {{user `vmid`}} --scsihw virtio-scsi-pci",
				"qm set {{user `vmid`}} --ide2 {{user `datastore`}}:cloudinit",
				"qm set {{user `vmid`}} --boot c --bootdisk scsi0",
				"qm set {{user `vmid`}} --ciuser     {{ user `ssh_username` }}",
				"qm set {{user `vmid`}} --cipassword {{ user `ssh_password` }}",
				"qm set {{user `vmid`}} --vga std"
			]
		}
	]
}
